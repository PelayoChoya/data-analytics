{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "AEvered - Tidepool Web Visualizations (Python versions).ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tidepool-org/data-analytics/blob/ae%2Fpython-daily-visualization/tidepool-daily-visualizations.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pXu6qot8cr-m",
        "colab_type": "text"
      },
      "source": [
        "# Tidepool Daily Visualizations (Python Version)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LomSRsTZQH6f",
        "colab_type": "text"
      },
      "source": [
        "## Instructions\n",
        "\n",
        "1.   Please run this in Playground Mode (click File, and Open in playground mode) or create a copy so you don't overwrite this example (i.e., File, \"Save a copy in Drive...\"\n",
        "2.   Before you run the code be sure to select \"Connect\" in the top right-hand corner of the webpage.\n",
        "3.   To run the code, you press shift-return to execute each cell, or you can press the Run button (above), or you can click on the \n",
        "4.   You will need to enter in your Tidepool credentials to pull your data (i.e., email address & pwd)\n",
        "5.   You will be prompted to connect your collaboratory instance to google drive, follow the link and copy/paste the auth string back into this notebook.\n",
        "6.   The code will save the results to your root google drive folder, \"My Drive.\" \n",
        "\n",
        "## API Specific\n",
        "\n",
        "The API code in this notebook is a copy of the original Get Your Tidepool Data Collab Notebook:\n",
        "https://colab.research.google.com/drive/1Az7nCgc0IoiTS-RSLyhS1gLAlM5Koieg?authuser=2\n",
        "\n",
        "For the API credentials:\n",
        "\n",
        "*   You can either enter in the big data credentials (Tidepool employees only) AND userID, or\n",
        "*   You can enter in your Tidepool email (username) and password (when prompted)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JQrMvBN1wqCQ",
        "colab_type": "text"
      },
      "source": [
        "##Required Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uMFHFQ3166rs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# %% REQUIRED LIBRARIES \n",
        "\n",
        "#API\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "import requests\n",
        "import json\n",
        "import getpass\n",
        "#import tz - look at existing code example for this - put in UTC time, automatically\n",
        "from datetime import timedelta\n",
        "\n",
        "#Visualizations\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.plotly as py\n",
        "import datetime\n",
        "import matplotlib.patches as mpatches\n",
        "from matplotlib.patches import Ellipse, Circle\n",
        "from matplotlib import rc\n",
        "import matplotlib.font_manager\n",
        "\n",
        "import plotly.graph_objs as go\n",
        "from plotly.offline import init_notebook_mode, iplot"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ESF-6i6a6LA8",
        "colab_type": "text"
      },
      "source": [
        "# Get and Save Data\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yvDMoACw7zAz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# %% get Tidepool data from api\n",
        "def get_data_from_api(\n",
        "    email=np.nan,\n",
        "    password=np.nan,\n",
        "    years_of_data=10,\n",
        "    userid_of_shared_user=np.nan,\n",
        "):\n",
        "  \n",
        "    if pd.isnull(email):\n",
        "        email=input(\"Enter Tidepool email address:\\n\")\n",
        "      \n",
        "    if pd.isnull(password):\n",
        "        password=getpass.getpass(\"Enter password:\\n\")\n",
        "  \n",
        "    df = pd.DataFrame()\n",
        "    url1 = \"https://api.tidepool.org/auth/login\"\n",
        "    url3 = \"https://api.tidepool.org/auth/logout\"\n",
        "    \n",
        "    myResponse = requests.post(url1, auth=(email, password))\n",
        "\n",
        "    if(myResponse.ok):\n",
        "        xtoken = myResponse.headers[\"x-tidepool-session-token\"]\n",
        "        \n",
        "        if pd.isnull(userid_of_shared_user):\n",
        "            userid = json.loads(myResponse.content.decode())[\"userid\"]\n",
        "        else:\n",
        "            userid = userid_of_shared_user       \n",
        "        \n",
        "        endDate = pd.datetime.now()\n",
        "\n",
        "        for years in range(1, years_of_data + 1):\n",
        "            startDate = endDate - pd.Timedelta(365, unit=\"d\")\n",
        "\n",
        "            url2 = \"https://api.tidepool.org/data/\" + userid + \\\n",
        "                \"?endDate=\" + endDate.strftime(\"%Y-%m-%d\") + \\\n",
        "                \"T23:59:59.000Z&startDate=\" + \\\n",
        "                startDate.strftime(\"%Y-%m-%d\") + \"T00:00:00.000Z\"\n",
        "\n",
        "            headers = {\n",
        "                \"x-tidepool-session-token\": xtoken,\n",
        "                \"Content-Type\": \"application/json\"\n",
        "                }\n",
        "\n",
        "            myResponse2 = requests.get(url2, headers=headers)\n",
        "            if(myResponse2.ok):\n",
        "\n",
        "                usersData = json.loads(myResponse2.content.decode())\n",
        "                tempDF = pd.DataFrame(usersData)\n",
        "                df = pd.concat([df, tempDF], ignore_index=True)\n",
        "\n",
        "            else:\n",
        "                print(\"ERROR in year \", years, myResponse2.status_code)\n",
        "\n",
        "            endDate = startDate - pd.Timedelta(1, unit=\"d\")\n",
        "    else:\n",
        "        print(\"ERROR in getting token \", myResponse.status_code)\n",
        "        myResponse2 = np.nan\n",
        "\n",
        "    myResponse3 = requests.post(url3, auth=(email, password))\n",
        "    \n",
        "    responses = [myResponse, myResponse2, myResponse3]\n",
        "\n",
        "    return df, responses\n",
        "  \n",
        "  \n",
        "data, responses = get_data_from_api(\n",
        "    years_of_data=1,  # valid numbers are 1-10\n",
        ")\n",
        "# print a list of the column headings in the dataset\n",
        "list(data)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CcJ7QJqkx8Vb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# save the data\n",
        "from google.colab import drive\n",
        "drive.mount(\"drive\", force_remount=True)\n",
        "\n",
        "data.to_csv(\"your-tidepool-data.csv\")\n",
        "!cp your-tidepool-data.csv drive/My\\ Drive/\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SsnD8V7r6m3c",
        "colab_type": "text"
      },
      "source": [
        "## Explore Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JYkl_TEb6vB8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data.head()\n",
        "\n",
        "#data.type"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ssYbZJwIv4GX",
        "colab_type": "text"
      },
      "source": [
        "# Data Preparation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z1ZTTBGQwBPW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Set Constants ####\n",
        "\n",
        "# For converting between mmol/ml to mg/dl\n",
        "BG_CONVERSION_FACTOR = 18\n",
        "\n",
        "#Hard code start and end date/time (can adjust later)\n",
        "START_DATE = datetime.datetime(2019,1,1,0,0) #adjust this, larger range than data want to display\n",
        "END_DATE = datetime.datetime(2019,1,2,0,0)\n",
        "\n",
        "\n",
        "#Hard code high and low limits\n",
        "HIGH_LIMIT = 180\n",
        "LOW_LIMIT = 70\n",
        "URGENT_HIGH_LIMIT = 250\n",
        "URGENT_LOW_LIMIT = 50"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GhFyHzb8pGK8",
        "colab_type": "text"
      },
      "source": [
        "##Data Preparation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OmYhtHxuPzL7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Overall Data Preparation ####\n",
        "\n",
        "# Convert from mmol/ml to mg/dl\n",
        "data['value_mgdl'] = data['value'].apply(lambda x: x*BG_CONVERSION_FACTOR)\n",
        "\n",
        "# Parse out date and time\n",
        "data['datetime_time'] = data['time'].apply(lambda x: datetime.datetime.strptime((x[:10]+ x[11:22]).replace('-','.'), '%Y.%m.%d%H:%M:%S.%f'))\n",
        "\n",
        "#Filter data for pre-START_DATE\n",
        "pre_start_date =  data[data['datetime_time'] < START_DATE]\n",
        "\n",
        "#Filter data for post-END_DATE\n",
        "post_end_date =  data[data['datetime_time'] > END_DATE]\n",
        "\n",
        "# Filter data just for the given date \n",
        "data_filtered = data[(data['datetime_time'] <= END_DATE) & (data['datetime_time'] >= START_DATE )]\n",
        "\n",
        "# Set bg color values\n",
        "data_filtered = data_filtered.copy() #temporary hacky solution to prevent error w/ iloc\n",
        "data_filtered['bg_colors'] = 'mediumaquamarine'\n",
        "data_filtered.loc[data_filtered['value_mgdl'] < URGENT_LOW_LIMIT, 'bg_colors'] = 'indianred'\n",
        "data_filtered.loc[(data_filtered['value_mgdl'] > URGENT_LOW_LIMIT) & (data_filtered['value_mgdl'] < LOW_LIMIT), 'bg_colors'] = 'lightcoral'\n",
        "data_filtered.loc[(data_filtered['value_mgdl'] > HIGH_LIMIT) & (data_filtered['value_mgdl'] < URGENT_HIGH_LIMIT), 'bg_colors'] = 'mediumpurple'\n",
        "data_filtered.loc[(data_filtered['value_mgdl'] > URGENT_HIGH_LIMIT), 'bg_colors'] = 'slateblue'\n",
        "\n",
        "#Preview data\n",
        "data_filtered"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IwKgDWaVzSN3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Data Preparation: BG data ####\n",
        "\n",
        "#Filter just for cbg data\n",
        "cbg = data_filtered[data_filtered['type'] == 'cbg']\n",
        "\n",
        "#Get just the time and value\n",
        "cbg_ts = cbg[['datetime_time','value_mgdl','bg_colors']]\n",
        "\n",
        "#Filter for just smbg data and create time and value version\n",
        "smbg = data_filtered[data_filtered['type'] == 'smbg']\n",
        "\n",
        "#Create time and value version\n",
        "smbg_ts = smbg[['datetime_time','value_mgdl', 'bg_colors']]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VRQLf3NK-Yd6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Data Preparation: Bolus data ####\n",
        "\n",
        "#Filter for bolus data: bolus, wizard\n",
        "bolus_wizard = data_filtered[data_filtered['type'] == 'wizard']\n",
        "bolus_no_wizard = data_filtered[data_filtered['type'] == 'bolus']\n",
        "\n",
        "#Fill in NA carb values with zeros\n",
        "data_filtered['carbInput'] = data_filtered['carbInput'].fillna(0)\n",
        "\n",
        "#Filter for just relevant variables\n",
        "bolus_wizard_ts = bolus_wizard[['datetime_time','carbInput']]\n",
        "bolus_no_wizard_ts = bolus_no_wizard[['datetime_time','carbInput','normal']]\n",
        "                   "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LC0H6leAKIv2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Data Preparation: Basal data ####\n",
        "basal = data_filtered[data_filtered['type'] == 'basal']\n",
        "\n",
        "#Add in a value for START_DATE basal based on last basal pre-START_DATE\n",
        "pre_start_date_basal = pre_start_date[pre_start_date['type'] == 'basal'] # Filter for only basal rates\n",
        "pre_start_date_basal.loc[pre_start_date_basal['deliveryType'] == 'suspend', 'rate'] = 0 # For suspend (i.e. value = NaN), replace value with 0\n",
        "max_date = max(pre_start_date_basal['datetime_time'])\n",
        "basal= basal.append({'datetime_time' : START_DATE, 'rate' : pre_start_date_basal.loc[pre_start_date_basal['datetime_time']==max_date, 'rate'].item()} , ignore_index=True)\n",
        "\n",
        "\n",
        "#Add in a value for END_DATE basal based on last basal in event range\n",
        "#max_date = max(basal['datetime_time'])\n",
        "#basal= basal.append({'datetime_time' : END_DATE, 'rate' : basal.loc[basal['datetime_time']==max_date, 'rate'].item()} , ignore_index=True)\n",
        "\n",
        "\n",
        "#For suspend (i.e. value = NaN), replace value with 0\n",
        "basal.loc[basal['deliveryType'] == 'suspend', 'rate'] = 0\n",
        "\n",
        "#Add column for use in visualization that has \n",
        "basal['label'] = ['S' if x == 'suspend' else 'R' for x in basal['deliveryType']]\n",
        "\n",
        "#Filter for just relevant variables\n",
        "basal_ts = basal[['datetime_time','rate', 'deliveryType','label']]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N9udbf-KXXqx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Data Preparation: Basal data ####\n",
        "settings_ts = data_filtered[data_filtered['type'] == 'pumpSettings']\n",
        "\n",
        "settings_ts"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D4b45ufB8gJr",
        "colab_type": "text"
      },
      "source": [
        "#Data Visualizations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sY1UqVHfRoFf",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "##Matplotlib Versions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDny9NAb2Tyk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "###### Helper Functions For Interaction ###### \n",
        "def get_ax_size(ax):\n",
        "    bbox = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())\n",
        "    width, height = bbox.width, bbox.height\n",
        "    width *= fig.dpi\n",
        "    height *= fig.dpi\n",
        "    return width, height\n",
        "\n",
        "def update_annot(bar):\n",
        "    x = bar.get_x()+bar.get_width()/2.\n",
        "    y = bar.get_y()+bar.get_height()\n",
        "    annot.xy = (x,y)\n",
        "    text = \"({:.2g},{:.2g})\".format( x,y )\n",
        "    annot.set_text(text)\n",
        "    annot.get_bbox_patch().set_alpha(0.4)\n",
        "\n",
        "\n",
        "def hover(event):\n",
        "    vis = annot.get_visible()\n",
        "    if event.inaxes == ax:\n",
        "        for bar in bars:\n",
        "            cont, ind = bar.contains(event)\n",
        "            if cont:\n",
        "                update_annot(bar)\n",
        "                annot.set_visible(True)\n",
        "                fig.canvas.draw_idle()\n",
        "                return\n",
        "    if vis:\n",
        "        annot.set_visible(False)\n",
        "        fig.canvas.draw_idle()\n",
        "\n",
        "#ig.canvas.mpl_connect(\"motion_notify_event\", hover)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fej41zfQ2kAt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Set fonts\n",
        "rc('font',**{'family':'serif','serif':['Times']}) #Unclear if this is working, but should fix font sizes\n",
        "\n",
        "#### Set the overall plot features ###\n",
        "matplot_daily_fig, (ax1, ax2, ax3) = plt.subplots(nrows = 3, ncols = 1, figsize=(15, 7), gridspec_kw={'height_ratios': [3, 2, 1]})\n",
        "\n",
        "\n",
        "###### Figure 1: Blood Glucose Levels ###### \n",
        "ax1.set_title('Blood Glucose mg/dl', loc = \"left\")\n",
        "ax1.set_ylim([0,300])\n",
        "ax1.scatter(x=cbg_ts[\"datetime_time\"], y=cbg_ts[\"value_mgdl\"], c=cbg_ts.bg_colors, s=15)\n",
        "ax1.scatter(x=smbg_ts[\"datetime_time\"], y=smbg_ts[\"value_mgdl\"], marker='o', c=smbg_ts.bg_colors, s=200)\n",
        "ax1.set_xlim(START_DATE, END_DATE)\n",
        "ax1.axhline(HIGH_LIMIT,linestyle='dashed', color = \"gray\")\n",
        "ax1.axhline(LOW_LIMIT,linestyle='dashed', color = \"gray\")\n",
        "ax1.axes.get_yaxis().set_ticks([LOW_LIMIT, HIGH_LIMIT, URGENT_HIGH_LIMIT]) #Add y axis values\n",
        "\n",
        "\n",
        "#ax1.axis('off') if want to remove the box around the graph\n",
        "#ax1.axes.get_xaxis().set_ticks([]) #Hide x axis\n",
        "#ax1.set_yticks(range(0, 300, 50)) #If want to adjust the tick marks with a range\n",
        "#ax1.axvspan(0, (int(END_DATE.strftime('%Y%m%d'))-int(START_DATE.strftime('%Y%m%d')))/3, facecolor='lightgray', alpha=0.5) #Change background color\n",
        "\n",
        "\n",
        "###### Figure 2: Bolus and Carbohydrates ######\n",
        "ax2.set_title('Bolus U & Carbohydrates g', loc = \"left\")\n",
        "ax2.bar(x=bolus_no_wizard_ts[\"datetime_time\"], height=bolus_no_wizard_ts[\"normal\"], color=\"lightskyblue\", width=0.013) #Add bars for boluses\n",
        "ax2.set_ylim([0, max(bolus_no_wizard[\"normal\"])*2])\n",
        "ax2.axes.get_xaxis().set_ticks([]) #Hide x axis\n",
        "ax2.axes.get_yaxis().set_ticks([0,5]) #Add y axis values\n",
        "\n",
        "\n",
        "#Create yellow circles with carb amounts (is there a more efficient way to do this, i.e. not with for loop)\n",
        "index = 0\n",
        "for element in bolus_wizard_ts[\"carbInput\"]:\n",
        "  if bolus_wizard_ts.iloc[index][\"carbInput\"] > 0:\n",
        "    circle = mpatches.Ellipse((bolus_wizard_ts.iloc[index][\"datetime_time\"], (bolus_no_wizard_ts.iloc[index][\"normal\"])+1), 0.028, 1.1, color='gold')\n",
        "    ax2.add_artist(circle)\n",
        "    ax2.text(bolus_wizard_ts.iloc[index][\"datetime_time\"], \n",
        "             (bolus_no_wizard_ts.iloc[index][\"normal\"])+1, \n",
        "             int(bolus_wizard_ts.iloc[index][\"carbInput\"]), \n",
        "             horizontalalignment='center', verticalalignment='center')\n",
        "  index+=1\n",
        "\n",
        "###### Figure 3: Basal Rates ######\n",
        "ax3.set_title('Basal Rates U/hr', loc = \"left\")\n",
        "ax3.step(x = basal_ts[\"datetime_time\"], y = basal_ts[\"rate\"], color = \"cornflowerblue\")\n",
        "ax3.set_xlim([START_DATE,END_DATE])\n",
        "ax3.set_ylim([0,2])\n",
        "ax3.axes.get_xaxis().set_ticks([]) #Hide x axis\n",
        "ax3.axes.get_yaxis().set_ticks([0,1.5]) #Add y axis values\n",
        "\n",
        "\n",
        "#Create blue circles with label \n",
        "index = 0\n",
        "for element in basal_ts[\"datetime_time\"]:\n",
        "    circle = mpatches.Ellipse((basal_ts.iloc[index][\"datetime_time\"], 1.5), 0.015, .4, color='cornflowerblue')\n",
        "    ax3.add_artist(circle)\n",
        "    ax3.text(basal_ts.iloc[index][\"datetime_time\"], \n",
        "             1.5, \n",
        "             basal_ts.iloc[index][\"label\"], \n",
        "             horizontalalignment='center', verticalalignment='center')\n",
        "    index+=1\n",
        "   \n",
        "matplot_daily_fig.tight_layout()\n",
        "\n",
        "#### Save figure to google drive - uncomment to us ####\n",
        "# Can update the type of file and resolution here\n",
        "\n",
        "#from google.colab import drive\n",
        "#drive.mount(\"drive\", force_remount=True)\n",
        "\n",
        "#matplot_daily_fig.savefig('daily_visualizations_matplotlib.png', dpi=300)\n",
        "#!cp daily_visualizations_matplotlib.png drive/My\\ Drive/\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fAINmx-mASXy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y5pi01hK_04Q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oSR8wgUMs5Bf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "bolus_no_wizard_ts"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DLPOJwRp58JR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Add the interaction\n",
        "\n",
        "# Additional Metrics\n",
        "# Time in Range \n",
        "# Average Glucose\n",
        "# Bolus Insulin\n",
        "# Time in Automode\n",
        "# Total Carbs\n",
        "# Standard Deviation\n",
        "# CV (CGM)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1DfqMxXi9INd",
        "colab_type": "text"
      },
      "source": [
        "##Plotly Versions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p9LXnYwtqPQi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Plotly Set-up Function ##\n",
        "# Pulled this set-up code from Ed's Calculate your Effective Basal Rates Notebook\n",
        "def configure_plotly_browser_state():\n",
        "  import IPython\n",
        "  display(IPython.core.display.HTML('''\n",
        "        <script src=\"/static/components/requirejs/require.js\"></script>\n",
        "        <script>\n",
        "          requirejs.config({\n",
        "            paths: {\n",
        "              base: '/static/base',\n",
        "              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',\n",
        "            },\n",
        "          });\n",
        "        </script>\n",
        "        '''))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hrYamyaddr01",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Plotly Setup ####\n",
        "  \n",
        "configure_plotly_browser_state()\n",
        "init_notebook_mode(connected=True)\n",
        "\n",
        "\n",
        "\n",
        "###### Figure 1: Blood Glucose Levels ###### \n",
        "\n",
        "\n",
        "## Set-up Layout\n",
        "bg_layout = go.Layout(\n",
        "   title=go.layout.Title(\n",
        "        text='Blood Glucose (mg/dl)',\n",
        "        x=0\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        autorange=True,\n",
        "        showgrid=True,\n",
        "        zeroline=True,\n",
        "        dtick=50,\n",
        "        gridcolor='rgb(255, 255, 255)',\n",
        "        gridwidth=1,\n",
        "        zerolinecolor='rgb(255, 255, 255)',\n",
        "        zerolinewidth=2\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        range = (START_DATE, END_DATE)\n",
        "    ),\n",
        "    shapes = [\n",
        "      {'type': 'line',\n",
        "        'x0': START_DATE,\n",
        "        'y0': LOW_LIMIT,\n",
        "        'y1': LOW_LIMIT,\n",
        "        'x1': END_DATE,\n",
        "        'line': {\n",
        "          'color': 'white',\n",
        "          'width': 2,\n",
        "          'dash': 'dash',\n",
        "        },\n",
        "      },\n",
        "      {'type': 'line',\n",
        "        'x0': START_DATE,\n",
        "        'y0': HIGH_LIMIT,\n",
        "        'y1': HIGH_LIMIT,\n",
        "        'x1': END_DATE,\n",
        "        'line': {\n",
        "          'color': 'white',\n",
        "          'width': 4,\n",
        "          'dash': 'dash',\n",
        "        },\n",
        "      }\n",
        "    ],\n",
        "    margin=dict(\n",
        "        l=40,\n",
        "        r=30,\n",
        "        b=50,\n",
        "        t=50,\n",
        "    ),\n",
        "    paper_bgcolor='rgb(243, 243, 243)',\n",
        "    plot_bgcolor='rgb(243, 243, 243)',\n",
        "    showlegend=False,\n",
        "    height=350\n",
        ")\n",
        "\n",
        "\n",
        "## Set-up Traces\n",
        "\n",
        "\n",
        "#CBG Data\n",
        "cbg_trace = go.Scatter(\n",
        "    x = cbg_ts[\"datetime_time\"], \n",
        "    y = cbg_ts[\"value_mgdl\"],\n",
        "    mode = 'markers',\n",
        "    marker=dict(size=6,\n",
        "      line=dict(width=0),\n",
        "      color= cbg_ts[\"bg_colors\"]\n",
        "    )\n",
        "    #,text = [\"Text A\", \"Text B\", \"Text C\", \"Text D\", \"Text E\"],\n",
        "    #hoverinfo = 'text',\n",
        ")\n",
        "\n",
        "#SBG Data\n",
        "smbg_trace=go.Scatter(\n",
        "    x=smbg_ts[\"datetime_time\"], \n",
        "    y=smbg_ts[\"value_mgdl\"],\n",
        "    mode='markers',\n",
        "    marker=dict(size=16,\n",
        "      line=dict(width=0),\n",
        "      color=smbg_ts[\"bg_colors\"]\n",
        "    )\n",
        ")\n",
        "\n",
        "#Create and plot figure\n",
        "bg_fig = go.Figure(data= [cbg_trace, smbg_trace], layout=bg_layout)\n",
        "iplot(bg_fig)\n",
        "\n",
        "\n",
        "###### Figure 2: Bolus and Carbohydrates ######\n",
        "\n",
        "\n",
        "## Set-up Layout\n",
        "bolus_layout = go.Layout(\n",
        "    title=go.layout.Title(\n",
        "        text='Bolus U and Carbohydrates g',\n",
        "        x=0\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        range=[0, 10], #autorange=True,\n",
        "        showgrid=True,\n",
        "        zeroline=True,\n",
        "        dtick=5,\n",
        "        gridcolor='rgb(255, 255, 255)',\n",
        "        gridwidth=1,\n",
        "        zerolinecolor='rgb(255, 255, 255)',\n",
        "        zerolinewidth=2,\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        range = (START_DATE, END_DATE)\n",
        "    ),\n",
        "    margin=dict(\n",
        "        l=40,\n",
        "        r=30,\n",
        "        b=50,\n",
        "        t=50,\n",
        "    ),\n",
        "    paper_bgcolor='rgb(243, 243, 243)',\n",
        "    plot_bgcolor='rgb(243, 243, 243)',\n",
        "    showlegend=False,\n",
        "    height=250\n",
        ")\n",
        "\n",
        "\n",
        "#Bolus data\n",
        "bolus_trace=go.Bar(\n",
        "            x=bolus_no_wizard_ts[\"datetime_time\"],\n",
        "            y=bolus_no_wizard_ts[\"normal\"],\n",
        "            width=999999,\n",
        "            marker=dict(\n",
        "                color='lightskyblue'\n",
        "            )\n",
        ")\n",
        "\n",
        "\n",
        "#Carb circles\n",
        "carb_trace=go.Scatter(\n",
        "              mode = 'markers + text',\n",
        "              x=bolus_no_wizard_ts[\"datetime_time\"],\n",
        "              y=bolus_no_wizard_ts[\"normal\"]+1,\n",
        "              marker = dict(\n",
        "                color = 'gold',\n",
        "                size = 25\n",
        "              ),\n",
        "              showlegend = False,\n",
        "              text=bolus_wizard_ts[\"carbInput\"], \n",
        "              textposition='middle center'\n",
        "  )\n",
        "\n",
        "#Create and plot figure\n",
        "bolus_fig = go.Figure(data= [bolus_trace, carb_trace], layout=bolus_layout)\n",
        "iplot(bolus_fig)\n",
        "\n",
        "\n",
        "###### Figure 3: Basal Rates ######\n",
        "\n",
        "\n",
        "## Set-up Layout\n",
        "basal_layout = go.Layout(\n",
        "    title=go.layout.Title(\n",
        "        text='Basal Rates U/hr',\n",
        "        x=0\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        range = (START_DATE, END_DATE)\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        range=[0, 2], #autorange=True,\n",
        "        showgrid=True,\n",
        "        zeroline=True,\n",
        "        dtick=1,\n",
        "        gridcolor='rgb(255, 255, 255)',\n",
        "        gridwidth=1,\n",
        "        zerolinecolor='rgb(255, 255, 255)',\n",
        "        zerolinewidth=2,\n",
        "        #tickmode = 'linear',\n",
        "        #tick0 = 0.5,\n",
        "    ),\n",
        "    margin=dict(\n",
        "        l=40,\n",
        "        r=30,\n",
        "        b=50,\n",
        "        t=50,\n",
        "    ),\n",
        "    paper_bgcolor='rgb(243, 243, 243)',\n",
        "    plot_bgcolor='rgb(243, 243, 243)',\n",
        "    showlegend=False,\n",
        "    height=200\n",
        ")\n",
        "\n",
        "\n",
        "#Basal\n",
        "basal_trace=go.Scatter(\n",
        "              mode = 'lines',\n",
        "              x=basal_ts[\"datetime_time\"],\n",
        "              y= basal_ts[\"rate\"],\n",
        "              showlegend = False,\n",
        "              line=dict(\n",
        "                  shape='vh',\n",
        "                  color='cornflowerblue'\n",
        "              ),\n",
        "            fill='tonexty'\n",
        "  )\n",
        "\n",
        "annotation_trace=go.Bar(\n",
        "              x=basal_ts[\"datetime_time\"],\n",
        "              y= [1.5] * basal_ts[\"datetime_time\"].count(),\n",
        "              showlegend = False,\n",
        "              marker=dict(\n",
        "                color='cornflowerblue',\n",
        "                line=dict(\n",
        "                    color='cornflowerblue',\n",
        "                    width=2),\n",
        "              )\n",
        "  )\n",
        "\n",
        "#Label circles\n",
        "label_trace=go.Scatter(\n",
        "              mode = 'markers + text',\n",
        "              x=basal_ts[\"datetime_time\"],\n",
        "              y= [1.5] * basal_ts[\"datetime_time\"].count(),\n",
        "              marker = dict(\n",
        "                color = 'cornflowerblue',\n",
        "                size = 25\n",
        "              ),\n",
        "              showlegend = False,\n",
        "              text=basal_ts['label'],\n",
        "              textposition='middle center'\n",
        "  )\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#Create and plot figure\n",
        "plotly_daily_fig = go.Figure(data= [basal_trace, annotation_trace, label_trace], layout=basal_layout)\n",
        "iplot(plotly_daily_fig)\n",
        "\n",
        "#Can export the images as png using the camera icon at upper right hand corner\"Download plot as png\"\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V_roDFtCoQww",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#### Additional Constants ####\n",
        "\n",
        "NUMBER_WEEKS = 1 #ENTER THIS - Choose from 1, 2 or 4\n",
        "TIME_FRAME_HOURS = 6 # ENTER THIS - Choose 3, 6, 12, 24\n",
        "#Note: 3 and 6 hours start at midnight, 12 and 24 start \n",
        "\n",
        "TIME_DELTA = timedelta(days = NUMBER_WEEKS*7 , hours = 0, minutes = 0, seconds = 0)\n",
        "TREND_END_DATE = START_DATE+TIME_DELTA\n",
        "\n",
        "configure_plotly_browser_state()\n",
        "init_notebook_mode(connected=True)\n",
        "\n",
        "#### Trend Visualizations ####\n",
        "\n",
        "###### Figure 1: Bar Graph ###### \n",
        "\n",
        "## Set-up Layout ##\n",
        "bg_layout = go.Layout(\n",
        "   title=go.layout.Title(\n",
        "        text='Blood Glucose (mg/dl) Trends',\n",
        "        x=0\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        autorange=True,\n",
        "        showgrid=True,\n",
        "        zeroline=True,\n",
        "        dtick=50,\n",
        "        gridcolor='rgb(255, 255, 255)',\n",
        "        gridwidth=1,\n",
        "        zerolinecolor='rgb(255, 255, 255)',\n",
        "        zerolinewidth=2\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        range = (START_DATE, TREND_END_DATE)\n",
        "    ),\n",
        "    shapes = [\n",
        "      {'type': 'line',\n",
        "        'x0': START_DATE,\n",
        "        'y0': LOW_LIMIT,\n",
        "        'y1': LOW_LIMIT,\n",
        "        'x1': TREND_END_DATE,\n",
        "        'line': {\n",
        "          'color': 'white',\n",
        "          'width': 2,\n",
        "          'dash': 'dash',\n",
        "        },\n",
        "      },\n",
        "      {'type': 'line',\n",
        "        'x0': START_DATE,\n",
        "        'y0': HIGH_LIMIT,\n",
        "        'y1': HIGH_LIMIT,\n",
        "        'x1': TREND_END_DATE,\n",
        "        'line': {\n",
        "          'color': 'white',\n",
        "          'width': 4,\n",
        "          'dash': 'dash',\n",
        "        },\n",
        "      }\n",
        "    ],\n",
        "    margin=dict(\n",
        "        l=40,\n",
        "        r=30,\n",
        "        b=50,\n",
        "        t=50,\n",
        "    ),\n",
        "    paper_bgcolor='rgb(243, 243, 243)',\n",
        "    plot_bgcolor='rgb(243, 243, 243)',\n",
        "    showlegend=False,\n",
        "    height=350\n",
        ")\n",
        "\n",
        "## Set-up Traces ##\n",
        "\n",
        "#If the time frame hours are 3 or 6, want to start at midnight, else start at 6am\n",
        "if (TIME_FRAME_HOURS == 3) | (TIME_FRAME_HOURS == 6):\n",
        "  range_start_date = START_DATE\n",
        "else:\n",
        "  range_start_date = START_DATE + timedelta(days = 0, hours = 6, minutes = 0, seconds = 0)\n",
        "\n",
        "range_end_date = range_start_date + timedelta(days = 0, hours = TIME_FRAME_HOURS, minutes = 0, seconds = 0)\n",
        "\n",
        "#Create an initial empty set of traces \n",
        "traces = []\n",
        "\n",
        "#Iterate through each time chunk and add boxplot trace for that time chunk\n",
        "for _ in range(int(24/TIME_FRAME_HOURS)):\n",
        "  cbg_filtered = cbg_ts[(cbg_ts.datetime_time >= range_start_date) & (cbg_ts.datetime_time < range_end_date)]\n",
        "  trace = go.Box(\n",
        "      y=cbg_filtered[\"value_mgdl\"],\n",
        "      name = range_end_date.hour,\n",
        "      marker = dict(\n",
        "        color = 'mediumaquamarine'\n",
        "      )\n",
        "  )\n",
        "  traces.append(trace)\n",
        "  range_start_date = range_end_date\n",
        "  range_end_date = range_end_date + timedelta(days = 0, hours = TIME_FRAME_HOURS, minutes = 0, seconds = 0)\n",
        "\n",
        "#Create and plot figure\n",
        "bg_trend_fig = go.Figure(data= traces, layout=bg_layout)\n",
        "iplot(bg_trend_fig)\n",
        "\n",
        "\n",
        "# To do:\n",
        "# \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XGAcYHs92q4L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
