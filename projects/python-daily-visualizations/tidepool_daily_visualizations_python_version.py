# -*- coding: utf-8 -*-
"""tidepool_daily_visualizations_python_version.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CIOxgVn3lOKexltOHMweARc7ZPG8FpFg

# Tidepool Daily Visualizations (Python Version)

## Instructions

1.   Please run this in Playground Mode (click File, and Open in playground mode) or create a copy so you don't overwrite this example (i.e., File, "Save a copy in Drive..."
2.   Before you run the code be sure to select "Connect" in the top right-hand corner of the webpage.
3.   To run the code, you press shift-return to execute each cell, or you can press the Run button (above), or you can click on the 
4.   You will need to enter in your Tidepool credentials to pull your data (i.e., email address & pwd)
5.   You will be prompted to connect your collaboratory instance to google drive, follow the link and copy/paste the auth string back into this notebook.
6.   The code will save the results to your root google drive folder, "My Drive." 

## API Specific

The API code in this notebook is a copy of the original Get Your Tidepool Data Collab Notebook:
https://colab.research.google.com/drive/1Az7nCgc0IoiTS-RSLyhS1gLAlM5Koieg?authuser=2

For the API credentials:

*   You can either enter in the big data credentials (Tidepool employees only) AND userID, or
*   You can enter in your Tidepool email (username) and password (when prompted)

##Required Libraries
"""

# %% REQUIRED LIBRARIES 

#API
import numpy as np
import pandas as pd
import os
import requests
import json
import getpass
#import tz - look at existing code example for this - put in UTC time, automatically

#Visualizations
import matplotlib.pyplot as plt
import plotly.plotly as py
import datetime
import matplotlib.patches as mpatches
from matplotlib.patches import Ellipse, Circle
from matplotlib import rc
import matplotlib.font_manager

import plotly.graph_objs as go
from plotly.offline import init_notebook_mode, iplot

"""# Get and Save Data"""

# %% get Tidepool data from api
def get_data_from_api(
    email=np.nan,
    password=np.nan,
    years_of_data=10,
    userid_of_shared_user=np.nan,
):
  
    if pd.isnull(email):
        email=input("Enter Tidepool email address:\n")
      
    if pd.isnull(password):
        password=getpass.getpass("Enter password:\n")
  
    df = pd.DataFrame()
    url1 = "https://api.tidepool.org/auth/login"
    url3 = "https://api.tidepool.org/auth/logout"
    
    myResponse = requests.post(url1, auth=(email, password))

    if(myResponse.ok):
        xtoken = myResponse.headers["x-tidepool-session-token"]
        
        if pd.isnull(userid_of_shared_user):
            userid = json.loads(myResponse.content.decode())["userid"]
        else:
            userid = userid_of_shared_user       
        
        endDate = pd.datetime.now()

        for years in range(1, years_of_data + 1):
            startDate = endDate - pd.Timedelta(365, unit="d")

            url2 = "https://api.tidepool.org/data/" + userid + \
                "?endDate=" + endDate.strftime("%Y-%m-%d") + \
                "T23:59:59.000Z&startDate=" + \
                startDate.strftime("%Y-%m-%d") + "T00:00:00.000Z"

            headers = {
                "x-tidepool-session-token": xtoken,
                "Content-Type": "application/json"
                }

            myResponse2 = requests.get(url2, headers=headers)
            if(myResponse2.ok):

                usersData = json.loads(myResponse2.content.decode())
                tempDF = pd.DataFrame(usersData)
                df = pd.concat([df, tempDF], ignore_index=True)

            else:
                print("ERROR in year ", years, myResponse2.status_code)

            endDate = startDate - pd.Timedelta(1, unit="d")
    else:
        print("ERROR in getting token ", myResponse.status_code)
        myResponse2 = np.nan

    myResponse3 = requests.post(url3, auth=(email, password))
    
    responses = [myResponse, myResponse2, myResponse3]

    return df, responses
  
  
data, responses = get_data_from_api(
    years_of_data=1,  # valid numbers are 1-10
)
# print a list of the column headings in the dataset
list(data)

# save the data
from google.colab import drive
drive.mount("drive", force_remount=True)

data.to_csv("your-tidepool-data.csv")
!cp your-tidepool-data.csv drive/My\ Drive/

"""## Explore Data"""

data.head()

#data.type

"""# Data Preparation"""

#### Set Constants ####

# For converting between mmol/ml to mg/dl
BG_CONVERSION_FACTOR = 18

#Hard code start and end date/time (can adjust later)
START_DATE = datetime.datetime(2019,1,1,0,0) #adjust this, larger range than data want to display
END_DATE = datetime.datetime(2019,1,2,0,0)


#Hard code high and low limits
HIGH_LIMIT = 180
LOW_LIMIT = 70
URGENT_HIGH_LIMIT = 250
URGENT_LOW_LIMIT = 50

"""##Data Preparation"""

#### Overall Data Preparation ####

# Convert from mmol/ml to mg/dl
data['value_mgdl'] = data['value'].apply(lambda x: x*BG_CONVERSION_FACTOR)

# Parse out date and time
# Better method - python pandas - pd._to_datetime - look for existing code where estimating local time - 
data['datetime_time'] = data['time'].apply(lambda x: datetime.datetime.strptime((x[:10]+ x[11:22]).replace('-','.'), '%Y.%m.%d%H:%M:%S.%f'))

# Filter data just for the given date 
data_filtered = data[(data['datetime_time'] <= END_DATE) & (data['datetime_time'] >= START_DATE)]

# Set bg color values
data_filtered = data_filtered.copy() #temporary hacky solution to prevent error w/ iloc
data_filtered['bg_colors'] = 'mediumaquamarine'
data_filtered.loc[data_filtered['value_mgdl'] < URGENT_LOW_LIMIT, 'bg_colors'] = 'indianred'
data_filtered.loc[(data_filtered['value_mgdl'] > URGENT_LOW_LIMIT) & (data_filtered['value_mgdl'] < LOW_LIMIT), 'bg_colors'] = 'lightcoral'
data_filtered.loc[(data_filtered['value_mgdl'] > HIGH_LIMIT) & (data_filtered['value_mgdl'] < URGENT_HIGH_LIMIT), 'bg_colors'] = 'mediumpurple'
data_filtered.loc[(data_filtered['value_mgdl'] > URGENT_HIGH_LIMIT), 'bg_colors'] = 'slateblue'

#Preview data
data_filtered

#### Data Preparation: BG data ####

#Filter just for cbg data
cbg = data_filtered[data_filtered['type'] == 'cbg']

#Get just the time and value
cbg_ts = cbg[['datetime_time','value_mgdl','bg_colors']]

#Filter for just smbg data and create time and value version
smbg = data_filtered[data_filtered['type'] == 'smbg']

#Create time and value version
smbg_ts = smbg[['datetime_time','value_mgdl', 'bg_colors']]

#### Data Preparation: Bolus data ####

#Filter for bolus data: bolus, wizard
bolus_wizard = data_filtered[data_filtered['type'] == 'wizard']
bolus_no_wizard = data_filtered[data_filtered['type'] == 'bolus']

#Fill in NA carb values with zeros
data_filtered['carbInput'] = data_filtered['carbInput'].fillna(0)

#Filter for just relevant variables
bolus_wizard_ts = bolus_wizard[['datetime_time','carbInput']]
bolus_no_wizard_ts = bolus_no_wizard[['datetime_time','carbInput','normal']]

#### Data Preparation: Basal data ####
basal = data_filtered[data_filtered['type'] == 'basal']

# For suspend (i.e. value = NaN), replace value with 0
basal.loc[basal['deliveryType'] == 'suspend', 'rate'] = 0

#Add column for use in visualization that has 
basal['label'] = ['S' if x == 'suspend' else 'R' for x in basal['deliveryType']]

#Filter for just relevant variables
basal_ts = basal[['datetime_time','rate', 'deliveryType','label']]

basal_ts

"""#Data Visualizations

##Matplotlib Versions
"""

###### Helper Functions For Interaction ###### 
def get_ax_size(ax):
    bbox = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
    width, height = bbox.width, bbox.height
    width *= fig.dpi
    height *= fig.dpi
    return width, height

def update_annot(bar):
    x = bar.get_x()+bar.get_width()/2.
    y = bar.get_y()+bar.get_height()
    annot.xy = (x,y)
    text = "({:.2g},{:.2g})".format( x,y )
    annot.set_text(text)
    annot.get_bbox_patch().set_alpha(0.4)


def hover(event):
    vis = annot.get_visible()
    if event.inaxes == ax:
        for bar in bars:
            cont, ind = bar.contains(event)
            if cont:
                update_annot(bar)
                annot.set_visible(True)
                fig.canvas.draw_idle()
                return
    if vis:
        annot.set_visible(False)
        fig.canvas.draw_idle()

#ig.canvas.mpl_connect("motion_notify_event", hover)

#Set fonts
rc('font',**{'family':'serif','serif':['Times']}) #Unclear if this is working, but should fix font sizes

#### Set the overall plot features ###
fig, (ax1, ax2, ax3) = plt.subplots(nrows = 3, ncols = 1, figsize=(15, 7), gridspec_kw={'height_ratios': [3, 2, 1]})


###### Figure 1: Blood Glucose Levels ###### 
ax1.set_title('Blood Glucose mg/dl', loc = "left")
ax1.set_ylim([0,300])
ax1.scatter(x=cbg_ts["datetime_time"], y=cbg_ts["value_mgdl"], c=cbg_ts.bg_colors, s=15)
ax1.scatter(x=smbg_ts["datetime_time"], y=smbg_ts["value_mgdl"], marker='o', c=smbg_ts.bg_colors, s=200)
ax1.set_xlim(START_DATE, END_DATE)
ax1.axhline(HIGH_LIMIT,linestyle='dashed', color = "gray")
ax1.axhline(LOW_LIMIT,linestyle='dashed', color = "gray")
#ax1.axes.get_xaxis().set_ticks([]) #Hide x axis
ax1.axes.get_yaxis().set_ticks([LOW_LIMIT, HIGH_LIMIT, URGENT_HIGH_LIMIT]) #Add y axis values
print((int(END_DATE.strftime('%Y%m%d'))-int(START_DATE.strftime('%Y%m%d'))))

#Add legend
#ax1.axvspan(0, (int(END_DATE.strftime('%Y%m%d'))-int(START_DATE.strftime('%Y%m%d')))/3, facecolor='lightgray', alpha=0.5) #Change background color


###### Figure 2: Bolus and Carbohydrates ######
ax2.set_title('Bolus U & Carbohydrates g', loc = "left")
ax2.bar(x=bolus_no_wizard_ts["datetime_time"], height=bolus_no_wizard_ts["normal"], color="lightskyblue", width=0.013) #Add bars for boluses
ax2.set_ylim([0, max(bolus_no_wizard["normal"])*2])
ax2.axes.get_xaxis().set_ticks([]) #Hide x axis
ax2.axes.get_yaxis().set_ticks([0,5]) #Add y axis values


#Create yellow circles with carb amounts (is there a more efficient way to do this, i.e. not with for loop)
index = 0
for element in bolus_wizard_ts["carbInput"]:
  if bolus_wizard_ts.iloc[index]["carbInput"] > 0:
    circle = mpatches.Ellipse((bolus_wizard_ts.iloc[index]["datetime_time"], (bolus_no_wizard_ts.iloc[index]["normal"])+1), 0.028, 1.1, color='gold')
    ax2.add_artist(circle)
    ax2.text(bolus_wizard_ts.iloc[index]["datetime_time"], 
             (bolus_no_wizard_ts.iloc[index]["normal"])+1, 
             int(bolus_wizard_ts.iloc[index]["carbInput"]), 
             horizontalalignment='center', verticalalignment='center')
  index+=1

###### Figure 3: Basal Rates ######
ax3.set_title('Basal Rates U/hr', loc = "left")
ax3.step(x = basal_ts["datetime_time"], y = basal_ts["rate"], color = "cornflowerblue")
ax3.set_xlim([START_DATE,END_DATE])
ax3.set_ylim([0,2])
#ax3.axes.get_xaxis().set_ticks([]) #Hide x axis
ax3.axes.get_yaxis().set_ticks([0,1.5]) #Add y axis values



#Create blue circles with label 
index = 0
for element in basal_ts["datetime_time"]:
    circle = mpatches.Ellipse((basal_ts.iloc[index]["datetime_time"], 1.5), 0.015, .4, color='cornflowerblue')
    ax3.add_artist(circle)
    ax3.text(basal_ts.iloc[index]["datetime_time"], 
             1.5, 
             basal_ts.iloc[index]["label"], 
             horizontalalignment='center', verticalalignment='center')
    index+=1


fig.tight_layout()
#fig.savefig('daily_visualizations.pdf')

bolus_no_wizard_ts

#Add the interaction

# Additional Metrics
# Time in Range 
# Average Glucose
# Bolus Insulin
# Time in Automode
# Total Carbs
# Standard Deviation
# CV (CGM)

"""##Plotly Versions"""

#### Plotly Setup ####

## Pulled this set-up code from Ed's Calculate your Effective Basal Rates Notebook
def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',
            },
          });
        </script>
        '''))
  
configure_plotly_browser_state()
init_notebook_mode(connected=True)



###### Figure 1: Blood Glucose Levels ###### 


## Set-up Layout
bg_layout = go.Layout(
   title=go.layout.Title(
        text='Blood Glucose (mg/dl)',
        x=0
    ),
    yaxis=dict(
        autorange=True,
        showgrid=True,
        zeroline=True,
        dtick=50,
        gridcolor='rgb(255, 255, 255)',
        gridwidth=1,
        zerolinecolor='rgb(255, 255, 255)',
        zerolinewidth=2
    ),
    xaxis=dict(
        range = (START_DATE, END_DATE)
    ),
    shapes = [
      {'type': 'line',
        'x0': START_DATE,
        'y0': LOW_LIMIT,
        'y1': LOW_LIMIT,
        'x1': END_DATE,
        'line': {
          'color': 'white',
          'width': 2,
          'dash': 'dash',
        },
      },
      {'type': 'line',
        'x0': START_DATE,
        'y0': HIGH_LIMIT,
        'y1': HIGH_LIMIT,
        'x1': END_DATE,
        'line': {
          'color': 'white',
          'width': 4,
          'dash': 'dash',
        },
      }
    ],
    margin=dict(
        l=40,
        r=30,
        b=50,
        t=50,
    ),
    paper_bgcolor='rgb(243, 243, 243)',
    plot_bgcolor='rgb(243, 243, 243)',
    showlegend=False,
    height=350
)


## Set-up Traces


#CBG Data
cbg_trace = go.Scatter(
    x = cbg_ts["datetime_time"], 
    y = cbg_ts["value_mgdl"],
    mode = 'markers',
    marker=dict(size=6,
      line=dict(width=0),
      color= cbg_ts["bg_colors"]
    )
    #,text = ["Text A", "Text B", "Text C", "Text D", "Text E"],
    #hoverinfo = 'text',
)

#SBG Data
smbg_trace=go.Scatter(
    x=smbg_ts["datetime_time"], 
    y=smbg_ts["value_mgdl"],
    mode='markers',
    marker=dict(size=16,
      line=dict(width=0),
      color=smbg_ts["bg_colors"]
    )
)

#Create and plot figure
bg_fig = go.Figure(data= [cbg_trace, smbg_trace], layout=bg_layout)
iplot(bg_fig)


###### Figure 2: Bolus and Carbohydrates ######


## Set-up Layout
bolus_layout = go.Layout(
    title=go.layout.Title(
        text='Bolus U and Carbohydrates g',
        x=0
    ),
    yaxis=dict(
        range=[0, 10], #autorange=True,
        showgrid=True,
        zeroline=True,
        dtick=5,
        gridcolor='rgb(255, 255, 255)',
        gridwidth=1,
        zerolinecolor='rgb(255, 255, 255)',
        zerolinewidth=2,
    ),
    xaxis=dict(
        range = (START_DATE, END_DATE)
    ),
    margin=dict(
        l=40,
        r=30,
        b=50,
        t=50,
    ),
    paper_bgcolor='rgb(243, 243, 243)',
    plot_bgcolor='rgb(243, 243, 243)',
    showlegend=False,
    height=250
)


#Bolus data
bolus_trace=go.Bar(
            x=bolus_no_wizard_ts["datetime_time"],
            y=bolus_no_wizard_ts["normal"],
            width=999999,
            marker=dict(
                color='lightskyblue'
            )
)


#Carb circles
carb_trace=go.Scatter(
              mode = 'markers + text',
              x=bolus_no_wizard_ts["datetime_time"],
              y=bolus_no_wizard_ts["normal"]+1,
              marker = dict(
                color = 'gold',
                size = 25
              ),
              showlegend = False,
              text=bolus_wizard_ts["carbInput"], 
              textposition='middle center'
  )

#Create and plot figure
bolus_fig = go.Figure(data= [bolus_trace, carb_trace], layout=bolus_layout)
iplot(bolus_fig)


###### Figure 3: Basal Rates ######


## Set-up Layout
basal_layout = go.Layout(
    title=go.layout.Title(
        text='Basal Rates U/hr',
        x=0
    ),
    xaxis=dict(
        range = (START_DATE, END_DATE)
    ),
    yaxis=dict(
        range=[0, 2], #autorange=True,
        showgrid=True,
        zeroline=True,
        dtick=1,
        gridcolor='rgb(255, 255, 255)',
        gridwidth=1,
        zerolinecolor='rgb(255, 255, 255)',
        zerolinewidth=2
    ),
    margin=dict(
        l=40,
        r=30,
        b=50,
        t=50,
    ),
    paper_bgcolor='rgb(243, 243, 243)',
    plot_bgcolor='rgb(243, 243, 243)',
    showlegend=False,
    height=200
)


#Basal
basal_trace=go.Scatter(
              mode = 'lines',
              x=basal_ts["datetime_time"],
              y= basal_ts["rate"],
              showlegend = False,
              line=dict(
                  shape='vh',
                  color='cornflowerblue'
              ),
            fill='tonexty'
  )

annotation_trace=go.Bar(
              x=basal_ts["datetime_time"],
              y= [1.5] * basal_ts["datetime_time"].count(),
              showlegend = False,
              marker=dict(
                color='cornflowerblue',
                line=dict(
                    color='cornflowerblue',
                    width=2),
              )
  )

#Label circles
label_trace=go.Scatter(
              mode = 'markers + text',
              x=basal_ts["datetime_time"],
              y= [1.5] * basal_ts["datetime_time"].count(),
              marker = dict(
                color = 'cornflowerblue',
                size = 25
              ),
              showlegend = False,
              text=basal_ts['label'],
              textposition='middle center'
  )




#Create and plot figure
basal_fig = go.Figure(data= [basal_trace, annotation_trace, label_trace], layout=basal_layout)
iplot(basal_fig)
